---		
layout: post		
title:  "什么是指令式编程"		
date:   2016-08-22 18:13:22 +0800		
categories:
- programming
tags: 机器人 Java C++ 编程 翻译
showcase: translation-command-based
---

> 原文：[What is Command based programming](http://wpilib.screenstepslive.com/s/4485/m/13809/l/599732-what-is-command-based-programming)

WPILib 支持通过“指令式编程”，一种帮助我们更好地管理机器人工程代码的设计模式，来编写机器人程序。机器人程序和一般的视窗程序不同的地方有：

1. 行为按次序执行。比如射出飞盘、提升升降装置、在目标地点放置一个管子等等由许多小动作组合而成的**一系列**动作。
2. 一些行为同时发生。比如让升降装置、机械手腕、机械夹**同时**工作来移动到拾取位置，这相比一个接一个地移动更有效率。
3. 最好能够单独测试某个机械或者某个行为，提高调试的效率。
4. 有时在上场前的最后一刻，还需要编写新的自动程序来提高运行效率，因此代码的可扩展性十分重要。

在编写机器人行为时，我们应该避免使用非模块化、非结构化的方法，而应使用指令式编程，因为她（是的！指令式编程在我心中就是如女神般的存在！）支持上述所有特性，使编写复杂的机器人行为更为简单方便。

---

## 指令和子系统

{% asset what-is-command-based-programming/1.png %}

使用 WPILib 的指令式编程编写的程序，最终的工程都是由最基本的两部分组成的：**子系统**和**指令**。

子系统：定义机器人的某个机械可以执行的功能。它继承于 `Subsystem` 类。

指令：通过子系统中支持的功能，结合成一个机器人的行为。它继承于 `Command` 类或 `CommandGroup` (指令组) 类。指令会被调度或事件发生时执行。比如手柄按钮被按下、SmartDashboard 中的虚拟按钮被按下。

## 指令是如何被执行的

{% asset what-is-command-based-programming/2.png %}

指令使得我们可以把操作机器人的一整个步骤分割成一个个小的部分。每个指令都有一个 `execute()` (执行) 函数和一个 `isFinished()` (是否执行结束) 函数。这些函数在收到 Driver Station 的状态更新后执行，周期大约为 20 毫秒。我们可以组合并依次执行指令。

## 并行

{% asset what-is-command-based-programming/3.png %}

有时我们需要几个行为同时执行来实现指定功能。在先前图中的例子里，可能需要在机械手腕转动的同时提升升降装置。我们可以通过**指令组**来启动数个并行执行的指令，甚至可以通过指令组来启动数个并行执行的指令组。

## 指令被以何种方式执行 —— 指令调度

{% asset what-is-command-based-programming/4.png %}

机器人程序中主要有三种方式调用指令：

1. 手动调用，直接调用指令的 `start()` 函数。（一般在自动阶段使用）
2. 自动在事件发生时执行。比如在程序中定义的按钮按下、按住等事件。（事件基本上都在 `OI` 类里定义，但会由调度器确定执行时机）
3. 在上一个指令执行完成时。（子系统的默认指令和指令组中的指令）

当机器人程序从 Driver Station 那里获取到了新的数据后，机器人程序的周期函数会被调用（这些函数都是 `Periodic` 结尾的）。在指令式机器人程序中，周期函数干的事情就是让调度器根据触发的事件确认是否需要执行新的指令，或者停止一个正在执行的指令。

当一个指令将要被执行时，调度器会保证没有其他指令在使用这个指令所需要的子系统。如果一个或多个子系统正在被其他指令使用，并且这些正在执行的指令可以被中断，那么正在执行的指令会被中断，新的指令就会被**加入当前正在执行的指令列表**。如果有正在执行的指令不能被中断，新的指令就无法执行。

## 指令如何被调用 —— 指令的执行

{% asset what-is-command-based-programming/5.png %}

调度器维护了一个当前正在执行的指令列表，在一个周期内调用每一个正在执行指令的 `execute()` 和 `isFinished()` 方法。显而易见，这些操作都可以不需要使用多线程多任务技术就能完成，这显著地降低了程序的复杂程度。每一个指令都有一个 `execute()` 函数和一个 `isFinished()` 函数。 `execute()` 函数执行让机器人一步步接近目标的程序； `isFinished()` 函数决定程序是否已经达到指令的目标。这两个函数都是不断地被周期性调用的。

## 指令组

{% asset what-is-command-based-programming/2.png %}

复杂的指令是由一个个小的指令组合而成的。比如射击飞盘可能由“瞄准飞盘”、“向‘指令式编程’女神敬礼”、“扣动扳机”等一系列指令组成，一个接一个执行。可能这些一个接一个执行的指令中还有需要并行执行的指令。指令组是一个指令，但不需要自己定义 `isFinished()` 和 `execute()` 方法，因为它帮助我们接管一系列指令的执行。因此我们可以把许多小的指令组合起来，变成一个巨大的复杂的指令组。这种模块化思想是经常在软件工程中使用到的。每一个小指令都可以被单独测试，最后再测试指令组。指令组的相关教程可以在“创建指令组”这一篇教程中找到。

*（感谢 [@SkyZH](https://github.com/SkyZH) [@IncredibLink](https://github.com/incrediblink/) 翻译）*
